#include "Dxlib.h"	//DxLibﾗｲﾌﾞﾗﾘを使用する　独自で準備したﾍｯﾀﾞｰﾌｧｲﾙは""で指定する
#include <vector>
#include <math.h>	// 標準ﾍｯﾀﾞｰﾌｧｲﾙは<>で指定する
#include"main.h"
#include "player.h"
#include"stage.h"

//struct DataHeader {
//	unsigned char identifier[4];
//	unsigned int  size;				// サイズ
//	unsigned int  mapWidth;			// 横幅 72
//	unsigned int  mapHeight;		// 縦幅 72
//	unsigned char chipWidth;		// チップ横幅 32
//	unsigned char chipHeight;		// チップ縦幅 32
//	unsigned char layerCount;		// レイヤー数 基本的に１
//	unsigned char bitCount;			// 8bit
//};
//#define MAP_FILE_ID "FMF_"
//
//enum MAP_ID {
//	MAP_ID_F_WALL,		 // 
//	MAP_ID_A_WALL,		 // 
//	MAP_ID_H_WALL,
//	MAP_ID_W_WALL,		 //　黄壁　
//	MAP_ID_BACK,	 	 // 紫　背景
//	MAP_ID_MAX
//};
//
//DataHeader expData;
//
//std::vector<MAP_ID>mapDataBase; // データを入れる箱
//std::vector<MAP_ID*>mapData; // アドレスを入れれる箱
//
//int mapImage2[5];
int mapImage[5]; // ブロック



int mapData[MAP_Y][MAP_X] = {	
	// 左上																			//  右上
	{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,  2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,  2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,2,  2,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0 },
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,3,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,1,1,1,1,1,1,1,4,4,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,3,3,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,3,3,3,3,3,3,3,1,1,1,1,1,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,3,3,3,3,3,3,3,4,4,4,4,4,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,4,4,4,4,4,  4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,4,4,4,4,4,  4,4,4,4,4,3,3,3,3,3,3,4,4,4,4,4,4,4,3,3,3,3,4,4,4,3,3,3,3,3,3,4,4,4,3,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,3,3,3,3,3,3,3,4,4,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,  3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,4,4,4,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,  3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,4,4,4,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,  3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,4,4,4,3,3,3,3,3,3,3,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,  3,3,3,3,3,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,4,4,3,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,3,3,3,2,  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,0},
	{2,2,4,4,4,4,4,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,4,4,2,2,2},

	// 左下																			// 右下
	{2,2,4,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,  2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,4,4,4,2,2,2,2},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,2,  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,2,  2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,3,3,3,3,3,3,4,4,4,4,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,3,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,3,3,3,3,3,3,4,4,4,4,4,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,  3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,3,3,3,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,  3,3,3,3,3,3,3,3,1,1,1,1,3,3,3,3,3,3,3,3,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,1,  1,1,3,3,3,3,3,3,4,4,4,4,3,3,3,3,3,3,3,3,4,4,4,4,3,3,3,4,4,4,4,4,4,4,4,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,4,4,  4,4,4,3,3,3,3,3,4,4,4,4,4,3,3,3,3,3,3,3,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,1,1,1,1,1,4,4,4,4,  4,4,4,3,3,3,3,4,4,4,4,4,4,4,3,3,3,3,3,3,3,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,  4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,3,3,3,3,3,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,  4,4,4,4,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,3,3,3,4,4,4,3,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,3,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,3,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,4,4,  4,4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,4,4,4,4,4,3,3,3,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,4,4,4,4,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,3,4,4,4,4,4,4,4,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,0},
	{0,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,2,  2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,3,3,3,3,3,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,2,  2,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,  2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

void StageSystmInit(void)
{
	LoadDivGraph("image/block.png", 5, 5, 1, CHIP_SIZE_X, CHIP_SIZE_Y, mapImage);
}

void StageGameInit(void)
{
	// ﾏｯﾌﾟ座標
	mapPos.x = 0;
	mapPos.y = 0;
	MapLoad();

}

void StageControl(void)
{
	// X方向
	if (mapPos.x < 0) mapPos.x = 0;
	if (mapPos.x > MAP_X*CHIP_SIZE_X - SCREEN_SIZE_X) mapPos.x
		= MAP_X * CHIP_SIZE_X - SCREEN_SIZE_X;

	//// y方向
	if (mapPos.y < 0) mapPos.y = 0;
	if (mapPos.y > MAP_Y*CHIP_SIZE_Y - SCREEN_SIZE_Y) mapPos.y
		= MAP_Y * CHIP_SIZE_Y - SCREEN_SIZE_Y;
}

void StageDraw(void)
{
	//for (int y = 0; y < expData.mapHeight; y++)
	//{
	//	for (int x = 0; x < expData.mapWidth; x++)
	//	{
	//		DrawGraph(x*expData.chipWidth - mapPos.x, y*expData.chipHeight - mapPos.y, mapImage2[mapData[y][x]], true);
	//	}
	//}

	for (int x = 0; x < MAP_X; x++) {
		for (int y = 0; y < MAP_Y; y++) {
			DrawGraph(x*CHIP_SIZE_X - mapPos.x, y*CHIP_SIZE_Y - mapPos.y, mapImage[mapData[y][x]], true);
		}
	}

	//for (int x = 0; x < MAP_X; x++) {
	//	for (int y = 0; y < MAP_Y; y++) {
	//		//DrawBox(50 * x - mapPos.x, 50 * y, 50 + (50 * x) - mapPos.x, 50 + (50 * y), 0xffffff, false);
	//		//DrawFormatString(x * CHIP_SIZE_X + 10, CHIP_SIZE_Y * y + 2, 0xffffff, "%02d", mapData[y][x]);
	//	}
	//}

}

bool MapLoad(void)
{
	FILE*file;
	fopen_s(&file, "MapData/map2.fmf", "rb");
	fread(&expData, sizeof(expData), 1, file);		// ヘッダー部分読み込み

	mapDataBase.resize(expData.mapWidth*expData.mapHeight);
	for (int j = 0; j < expData.mapWidth*expData.mapHeight; j++)
	{
		fread(&mapDataBase[j], sizeof(unsigned char), 1, file); // 1個のデータ取り出す
	}
	fclose(file);

	mapData.resize(expData.mapHeight);

	for (int j = 0; j < expData.mapHeight; j++)
	{
		mapData[j] = &mapDataBase[expData.mapWidth*j];
	}


	return true;
}


XY MapPosToIndex(XY pos)	// pos = mvedPos
{
	XY mapIndex;

	mapIndex = { pos.x / CHIP_SIZE_X, pos.y / CHIP_SIZE_Y };

	return mapIndex;
}

bool IsPass(XY pos)
{
	bool ret = true;			// 障害物があるかの判定: true = ない false = ある
	//bool blueblock = true;		// ワイヤーをかけれるブロックがあるかの判定: true = ない　false = ある

	int mapNo;
	XY mapIndex;

	mapIndex = MapPosToIndex(pos);
	mapNo = mapData[mapIndex.y][mapIndex.x];

	//switch (mapNo) // enumに
	//{
	//case MAP_ID::MAP_ID_F_WALL:
	//case MAP_ID::MAP_ID_A_WALL:
	//case MAP_ID::MAP_ID_H_WALL:
	//case MAP_ID::MAP_ID_W_WALL:
	//	blueblock = false;		// ブロックがあるのでくっつけたい
	//	break;
	//case MAP_ID::MAP_ID_BACK:
	//	ret = false;
	//	break;
	//}
	//return blueblock;


	switch (mapNo)
	{
	case 0:
	case 1:						// 青色ブロック
	case 2:
	case 3:
		ret = false;			// 障害物があるので進めない
		break;
	}
	return ret;
}

bool WireBlockPass(XY pos)
{
	bool blueblock = true;		// ワイヤーをかけれるブロックがあるかの判定: true = ない　false = ある
	int mapNo;
	XY mapIndex;

	mapIndex = MapPosToIndex(pos);
	mapNo = mapData[mapIndex.y][mapIndex.x];

	switch (mapNo)
	{
	case 0:
	case 1:						// 青色ブロック
		 blueblock = false;		// ブロックがあるのでくっつけたい
		 break;
	case 2:
	case 3:
		break;
	}
	return blueblock;
}

// 壁にぴったりくっつくようにする
XY MapIndexToPos(XY index)
{
	XY mapPos;

	mapPos = { index.x * CHIP_SIZE_X, index.y * CHIP_SIZE_Y };

	return mapPos;
}

XY MapPos(XY pos, MOVE_DIR der) {
	XY tmpIndex;
	tmpIndex = MapPosToIndex(pos);
	switch (der)
	{
	case DIR_UP:
		tmpIndex.y;
		break;
	case DIR_RIGHT:
		tmpIndex.x++;
		break;
	case DIR_DOWN:
		tmpIndex.y++;
		break;
	case DIR_LEFT:
		tmpIndex.x;
		break;
	}
	return MapIndexToPos(tmpIndex);
}
